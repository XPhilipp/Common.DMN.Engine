using System;
using System.Data;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using net.adamec.lib.common.dmn.engine.simulator.model.decision.table;

namespace net.adamec.lib.common.dmn.engine.simulator.controls.common;

/// <summary>
/// Data grid used to show the decision table.
/// Provides typed column headers with details about inputs, outputs, etc.
/// for autogenerated column
/// </summary>
public class DataGridEx : DataGrid
{
    /// <summary>
    /// Brush for column separator between Index, Inputs section, Outputs section and "Others"
    /// </summary>
    private static readonly SolidColorBrush SeparatorBorderBrush = new SolidColorBrush(Colors.Black);
    /// <summary>
    /// Border size for column separator between Index, Inputs section, Outputs section and "Others"
    /// </summary>
    private static double SeparatorBorderSize = 0.5;

    /// <summary>
    /// Cell style for column separator having the left border only
    /// </summary>
    private Style LeftSeparatorCellStyle { get; }
    /// <summary>
    /// Cell style for column separator having the right border only
    /// </summary>
    private Style RightSeparatorCellStyle { get; }
    /// <summary>
    /// Cell style for column separator having the left and right border
    /// </summary>
    private Style LeftAndRightSeparatorCellStyle { get; }

    /// <summary>
    /// Type of the last auto-generated column
    /// </summary>
    private Type lastAutoGeneratedColumnType = typeof(IndexColumn);
    /// <summary>
    /// Last auto-generated column
    /// </summary>
    private DataGridColumn? lastAutoColumn;

    /// <summary>
    /// CTOR
    /// </summary>
    public DataGridEx()
    {
        //init separator cell styles

        LeftSeparatorCellStyle = new Style(typeof(DataGridCell), CellStyle);
        LeftSeparatorCellStyle.Setters.Add(new Setter(BorderThicknessProperty, new Thickness(SeparatorBorderSize, 0.0, 0.0, 0.0)));
        LeftSeparatorCellStyle.Setters.Add(new Setter(BorderBrushProperty, SeparatorBorderBrush));

        RightSeparatorCellStyle = new Style(typeof(DataGridCell), CellStyle);
        RightSeparatorCellStyle.Setters.Add(new Setter(BorderThicknessProperty, new Thickness(0.0, 0.0, SeparatorBorderSize, 0.0)));
        RightSeparatorCellStyle.Setters.Add(new Setter(BorderBrushProperty, SeparatorBorderBrush));

        LeftAndRightSeparatorCellStyle = new Style(typeof(DataGridCell), CellStyle);
        LeftAndRightSeparatorCellStyle.Setters.Add(new Setter(BorderThicknessProperty, new Thickness(SeparatorBorderSize, 0.0, SeparatorBorderSize, 0.0)));
        LeftAndRightSeparatorCellStyle.Setters.Add(new Setter(BorderBrushProperty, SeparatorBorderBrush));
    }


    /// <summary>
    /// Raises <see cref="DataGrid.AutoGeneratingColumn"/> event and
    /// Provides typed column header with details about inputs, outputs, etc. for autogenerated column
    /// </summary>
    /// <param name="e"></param>
    protected override void OnAutoGeneratingColumn(DataGridAutoGeneratingColumnEventArgs e)
    {
        base.OnAutoGeneratingColumn(e);

        var columnName = e.Column.Header.ToString();
        if (ItemsSource is not DataView dataView) return;

        var dataTable = dataView.Table;
        var columnSource = dataTable?.Columns[columnName ?? "[unknown]"];
        if (columnSource == null) return;

        e.Column.Header = columnSource;

        if (columnSource is not IndexColumn && columnSource.GetType() != lastAutoGeneratedColumnType)
        {
            //separate columns of different types
            e.Column.CellStyle = LeftSeparatorCellStyle;

            if (lastAutoColumn != null)
            {
                //preserve left border if needed
                lastAutoColumn.CellStyle = lastAutoColumn.CellStyle != LeftSeparatorCellStyle ? RightSeparatorCellStyle : LeftAndRightSeparatorCellStyle;
            }
        }

        lastAutoGeneratedColumnType = columnSource.GetType();
        lastAutoColumn = e.Column;
    }
}